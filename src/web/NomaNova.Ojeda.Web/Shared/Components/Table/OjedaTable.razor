@typeparam TItem
@inject ITimeKeeper _timeKeeper

<table class="table table-striped table-hover w-100">
    <thead>
    <tr>
        @foreach (var column in Columns)
        {
            <th class="@GetAlignmentClass(column.Alignment)">@column.Caption</th>
        }
    </tr>
    </thead>
    <tbody>
    @foreach (var item in DataItems)
    {
        <tr @onclick="@(() => OnItemSelected.InvokeAsync(item))">
            @foreach (var column in Columns)
            {
                <td class="@GetAlignmentClass(column.Alignment)">@GetFormattedValue(item, column)</td>
            }
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public ICollection<TItem> DataItems { get; set; }

    [Parameter]
    public ICollection<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public EventCallback<TItem> OnItemSelected { get; set; }

    private string GetFormattedValue(TItem item, ColumnDefinition column)
    {
        if (!GetValue(item, column.DataField, out var value))
        {
            throw new Exception($"Could not retrieve value for {column.DataField}");
        }
        
        switch (column.DataType)
        {
            case DataType.NotSet:
            case DataType.String:
                return value?.ToString();
            case DataType.RelativeDateTime:
                if (DateTime.TryParse(value?.ToString(), out var result))
                {
                    return result.ToRelativeTime(_timeKeeper);
                }
                return string.Empty;
            default:
                throw new NotImplementedException();
        }
    }

    private string GetAlignmentClass(Alignment alignment)
    {
        return alignment == Alignment.NotSet ? string.Empty : $"align-{alignment.ToString().ToLower()}";
    }

    private bool GetValue(object obj, string pathName, out object fieldValue) 
    {
        if (obj == null)
        {
            throw new ArgumentException(nameof(obj));
        }

        var currentObject = obj;
        var fieldNames = pathName.Split(".");

        foreach (var fieldName in fieldNames)
        {
            if (currentObject == null)
            {
                throw new ArgumentException(nameof(currentObject));
            }

            var currentRecordType = currentObject.GetType(); 
            var property = currentRecordType.GetProperty(fieldName); 

            if (property != null) 
            { 
                currentObject = property.GetValue(currentObject, null); 
            } 
            else 
            { 
                fieldValue = null; 
                return false; 
            }
        }

        fieldValue = currentObject;
        return true; 
    } 
    
}
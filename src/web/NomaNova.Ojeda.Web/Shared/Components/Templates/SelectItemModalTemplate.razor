@typeparam TItem

<div class="d-flex flex-column justify-content-between">

    <p>@((MarkupString)HelpText)</p>
    
    <div class="mb-3">
        <Search OnValueChanged="@SearchCallback" />
    </div>

    <div class="mb-3" style="height: 350px; overflow-y: auto;">

            @if (Error != null)
            {
                <p class="text-danger fst-italic">@Error</p>
            }
            else if (Items == null || IsLoading)
            {
                <p class="text-muted fst-italic">Loading...</p>
            }
                else if (!Items.Any())
                {
                    if (string.IsNullOrEmpty(SearchQuery))
                    {
                        <p class="text-muted fst-italic">No items available.</p>
                    }
                    else
                    {
                        <p class="text-muted fst-italic">No search results.</p>
                    }
                }
                else
                {
                    <table class="table table-hover w-100">
                        <thead>
                        <tr>
                            @TableHeader
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in Items)
                        {
                            <tr @onclick="@(() => SelectItemCallBack.InvokeAsync(item))" style="cursor: pointer;">
                                @RowTemplate(item)
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            
    </div>

    <div class="d-flex justify-content-between align-items-center">
        
             <div class="d-flex align-items-center">
                        <div class="me-2">
                        <SlimPager
                            PageCount="@PageCount"
                            CurrentPage="@CurrentPage"
                            OnPageChanged="@PageChangedCallback"/>
                        </div>
                        
                        <Spinner IsLoading="@IsLoading" />
                    </div>
        
        <button class="btn btn-secondary" @onclick="@(() => CancelCallBack.InvokeAsync())">Cancel</button>
        
    </div>

</div>

@code {

    [Parameter]
    public string HelpText { get; set; }
    
    [Parameter]
    public string Error { get; set; }
    
    [Parameter]
    public bool IsLoading { get; set; }
    
    [Parameter]
    public string SearchQuery { get; set; }
    
    [Parameter]
    public RenderFragment TableHeader { get; set; }
    
    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }
    
    [Parameter]
    public int PageCount { get; set; }
    
    [Parameter]
    public int CurrentPage { get; set; }
    
    [Parameter]
    public ICollection<TItem> Items { get; set; }
    
    [Parameter]
    public Func<string, Task> SearchCallback { get; set; }
    
    [Parameter]
    public EventCallback<TItem> SelectItemCallBack { get; set; }

    [Parameter] 
    public Func<int, Task> PageChangedCallback { get; set; }
    
    [Parameter]
    public EventCallback CancelCallBack { get; set; }
}
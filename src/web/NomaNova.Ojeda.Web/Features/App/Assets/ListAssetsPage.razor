@page "/assets"
@inherits ListItemsPage<AssetSummaryDto>

@inject OjedaClient _ojeda
@inject NavigationManager _navManager

<div class="d-flex justify-content-between mt-2 mb-4">
    <div class="d-flex align-items-center">
        <h3 class="m-0">Assets</h3>
    </div>
    <div class="d-flex">
        <div class="d-flex align-items-center me-3">
            <Spinner IsLoading="@IsLoading"/>
        </div>
        <ViewSelector OnViewModeChanged="@OnViewModeChanged"/>
        <button class="btn btn-primary ms-2" @onclick="OnAdd">Add Asset</button>
    </div>
</div>

@if (Items == null)
{
    <p class="text-muted fst-italic">Loading...</p>
}
else if (!Items.Any())
{
    <p class="text-muted fst-italic">No assets available.</p>
}
else
{
    <ViewSwitcher ViewMode="_viewMode">
        <GridTemplate>
            <div class="asset-grid">
                @foreach (var asset in Items)
                {
                    <div class="asset-item">
                        <AssetCard Asset="@asset" OnSelected="@(() => OnShowAsset(asset))"/>
                    </div>
                }
            </div>
        </GridTemplate>
        <TableTemplate>
            <OjedaTable TItem="AssetSummaryDto" 
                        DataItems="@Items" 
                        Columns="@_columnDefinitions" 
                        OnItemSelected="OnShowAsset" />
        </TableTemplate>
    </ViewSwitcher>

    <div class="mt-4 mb-4">
        <OjedaPager
            PageCount="@PageCount"
            CurrentPage="@CurrentPage"
            PageSize="@PageSize"
            TotalCount="@TotalCount"
            OnPageChanged="@OnPageChanged"
            OnPageSizeChanged="@OnPageSizeChanged"/>
    </div>
}

@code {

    private ViewMode _viewMode = ViewMode.Grid;

    [CascadingParameter]
    public IModalService Modal { get; set; }

    protected override string Path => "/assets";

    private List<ColumnDefinition> _columnDefinitions;

    protected override void OnInitialized()
    {
        if (_columnDefinitions == null)
        {
            _columnDefinitions = new List<ColumnDefinition>();

            _columnDefinitions.AddRange(new[]
            {
                new ColumnDefinition {DataField = "Name", Caption = "Name"},
                new ColumnDefinition {DataField = "AssetType.Name", Caption = "Type"},
                new ColumnDefinition {DataField = "UpdatedAt", Caption = "Last Updated", DataType = DataType.RelativeDateTime, Alignment = Alignment.Right}
            });
        }
    }

    private new async Task OnAdd()
    {
        var addAssetModal = Modal.Show<SelectAssetTypeModal>("Add Asset", Constants.DefaultModalOptions);
        var result = await addAssetModal.Result;

        if (!result.Cancelled)
        {
            var assetType = (AssetTypeDto) result.Data;
            _navManager.NavigateTo($"/assets/add?assetTypeId={assetType.Id}");
        }
    }

    private void OnViewModeChanged(ViewMode mode)
    {
        _viewMode = mode;
    }

    private void OnShowAsset(AssetSummaryDto asset)
    {
        _navManager.NavigateTo($"/assets/{asset.Id}");
    }

    protected override async Task<OjedaDataResult<PaginatedListDto<AssetSummaryDto>>> FetchItemsAsync(string query = null,
        int pageNumber = Constants.DefaultPageNumber,
        int pageSize = Constants.DefaultPageSize)
    {
        return await _ojeda.AssetsService.GetAsync(query, null, true, pageNumber, pageSize);
    }

}
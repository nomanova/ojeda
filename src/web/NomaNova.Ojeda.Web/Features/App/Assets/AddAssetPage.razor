@page "/assets/add"

@inherits UpsertAssetPage

<h3>Add Asset</h3>

@if (_error != null)
{
    <p class="text-danger fst-italic">@_error</p>
    <a href="/assets">Return to Assets</a>
}
else if (_isLoading)
{
    <p class="text-muted fst-italic">Loading...</p>   
}
else
{
    <div class="ojeda-form mt-3">

    <EditForm EditContext="_editContext" OnValidSubmit="OnSubmitForm">
        
        <AssetFluentValidationValidator Asset="@Asset" />
        <ServerSideFluentValidation @ref="_serverValidation" />
        
        <!-- Header -->
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-4 d-flex align-items-center justify-content-center">
                        
                        <!-- Image -->
                            <div class="image d-flex align-items-center justify-content-center">
                                <i class="fs-6 bi-box" style="font-size: 90px !important; color: rgba(206, 212, 218, 0.5);"></i>
                            </div>
                        
                    </div>
                    <div class="col-8">

                        <!-- Type -->
                        <OjedaFormField ForId="field-type" Label="Type" IsRequired="false">
                            <input
                                class="form-control"
                                id="field-type"
                                value="@Asset.AssetType.Name" 
                                disabled />
                        </OjedaFormField>

                        <!-- Name -->
                        <OjedaFormField ForId="field-name" Label="Name" IsRequired="true" ValidateFor="@(() => _createAsset.Name)">
                            <OjedaInputText @bind-Value="_createAsset.Name" class="form-control" id="field-name" disabled="@_isSubmitting" />
                        </OjedaFormField>
                        
                    </div>
                </div>
            </div>
        </div>

        <!-- Field Sets -->
        @foreach (var fieldSet in _createAsset.FieldSets)
        {
            <FormSection Title="@(GetFieldSetName(fieldSet.Id))" HelpText="@(GetFieldSetDescription(fieldSet.Id))">
                @foreach (var field in fieldSet.Fields)
                {
                    var hash = $"{fieldSet.Id}-{field.Id}".ToShortHash();
                    
                    <div class="mb-3">
                        <label for="@hash" class="form-label">@(GetFieldLabel(fieldSet.Id, field.Id))</label>
                        
                        @{
                            var fieldDataType = GetFieldDataType(fieldSet.Id, field.Id);
                        }
                        
                        @if (fieldDataType == FieldDataTypeDto.String)
                        {
                            var fieldData = (StringFieldDataDto)field.Data;
                            
                            <OjedaInputText @bind-Value="fieldData.Value" class="form-control" id="@hash" disabled="@_isSubmitting"
                                            placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                            
                            <ValidationMessage For="@(() => fieldData.Value)"></ValidationMessage>
                        }
                        
                        @if (fieldDataType == FieldDataTypeDto.Long)
                        {
                            var fieldData = (LongFieldDataDto)field.Data;
                            
                            <OjedaInputNumber @bind-Value="fieldData.Value"
                                              ParsingErrorMessage="Value must be integer."
                                              class="form-control" id="@hash" disabled="@_isSubmitting"
                                              placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                            
                            <ValidationMessage For="@(() => fieldData.Value)"></ValidationMessage>
                        }
                        
                        @if (fieldDataType == FieldDataTypeDto.Double)
                        {
                            var fieldData = (DoubleFieldDataDto)field.Data;
                            
                            <OjedaInputNumber @bind-Value="fieldData.Value" class="form-control" id="@hash" disabled="@_isSubmitting"
                                              placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                            
                            <ValidationMessage For="@(() => fieldData.Value)"></ValidationMessage>
                        }
                    </div>
                }
            </FormSection>
        }

            <OjedaFormFooter
                CssClass="my-4"
                Alignment="@FormFooterAlignment.End"
                IsSubmitting="@_isSubmitting"
                OnCancel="@OnCancel"
                OnReset="@OnReset"/>

    </EditForm>
    
    </div>
}

@code {

    private CreateAssetDto _createAsset = new();
    
    private EditContext _editContext;

    private ServerSideFluentValidation _serverValidation;

    private bool _isLoading;
    private bool _isSubmitting;
    private string _error;
    
    protected override async Task OnInitializedAsync()
    {
        NavManager.TryGetQueryString<string>("assetTypeId", out var assetTypeId);

        await GetAssetType(assetTypeId);
    }

    private async Task OnSubmitForm()
    {
        if (_isSubmitting)
        {
            return;
        }
        
        _isSubmitting = true;
        _serverValidation.ClearErrors();

        var result = await Ojeda.AssetsService.CreateAsync(_createAsset);
        
        if(result.StatusCode == HttpStatusCode.BadRequest && result.Error.ValidationErrors.Any())
        {
            _serverValidation.DisplayErrors(result.Error.ValidationErrors);
        }
        else if (!result.Success)
        {
            ToastService.ShowError($"Could not submit asset. {result.Error?.Message} ({result.Error?.Code}).");
        }
        else
        {
            var asset = result.Data;
            NavManager.NavigateTo($"/assets/{asset.Id}");
        }
        
        _isSubmitting = false;
    }

    private void OnCancel()
    {
        if (_isSubmitting)
        {
            return;
        }
        
        NavManager.NavigateTo("/assets");
    }
    
    private void OnReset()
    {
        if (_isSubmitting)
        {
            return;
        }

        Init();
    }

    private async Task GetAssetType(string assetTypeId)
    {
        if (string.IsNullOrEmpty(assetTypeId))
        {
            _error = "Cannot load asset: asset type id is missing.";
            return;
        }

        _isLoading = true;
        
        var result = await Ojeda.AssetsService.GetByAssetType(assetTypeId);

        if (result.Success)
        {
            _error = null;
            Asset = result.Data;

            Init();
        }
        else if (result.StatusCode == HttpStatusCode.NotFound)
        {
            _error = "Cannot load asset: asset type does not exist.";
        }
        else
        {
            ToastService.ShowError($"Could not load asset type. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo("/assets");
        }

        _isLoading = false;
    }

    private void Init()
    {
        _createAsset = new CreateAssetDto
        {
            AssetTypeId = Asset.AssetType.Id,
            FieldSets = Asset.FieldSets.Select(fs => new CreateAssetFieldSetDto
            {
                Id = fs.Id,
                Fields = fs.Fields.Select(f => new CreateAssetFieldDto
                {
                    Id = f.Id,
                    Data = f.Data.Copy()
                }).ToList()
            }).ToList()
        };

        _editContext = new EditContext(_createAsset);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }
}
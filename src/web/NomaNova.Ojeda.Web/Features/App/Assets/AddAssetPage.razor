@page "/assets/add"
@using NomaNova.Ojeda.Models.Dtos.Fields

@inject NavigationManager NavManager
@inject IToastService ToastService
@inject OjedaClient Ojeda

<h3>Add Asset</h3>

@if (_error != null)
{
    <p class="text-danger fst-italic">@_error</p>
    <a href="/assets">Return to Assets</a>
}
else if (_isLoading)
{
    <p class="text-muted fst-italic">Loading...</p>   
}
else
{
    <div class="ojeda-form mt-3">
    
    <!-- Class -->        
    <div class="card mb-3">
        <div class="card-body">
            <div class="row">
                <div class="col-4">
                    <h5>Class</h5>
                </div>
                <div class="col-8">
                    <p>@_asset.AssetType.Name</p>
                    <span class="text-muted fst-italic">@_asset.AssetType.Description</span>
                </div>
            </div>
        </div>
    </div>
                              
    <EditForm EditContext="_editContext" OnValidSubmit="OnSubmitForm">
        
        <AssetFluentValidationValidator Asset="@_asset" />
        <ServerSideFluentValidation @ref="_serverValidation" />
        
        @foreach (var fieldSet in _createAsset.FieldSets)
        {
            <FormSection Title="@(GetFieldSetName(fieldSet.Id))" HelpText="@(GetFieldSetDescription(fieldSet.Id))">
                @foreach (var field in fieldSet.Fields)
                {
                    var hash = $"{fieldSet.Id}-{field.Id}".ToShortHash();
                    
                    <div class="mb-3">
                        <label for="@hash" class="form-label">@(GetFieldName(fieldSet.Id, field.Id))</label>
                        
                        @{
                            var fieldType = GetFieldType(fieldSet.Id, field.Id); 
                        }
                        
                        @if (fieldType == FieldTypeDto.Text)
                        {
                            <OjedaInputText @bind-Value="field.Data" class="form-control" id="@hash" disabled="@_isSubmitting"
                                             placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                        }
                        
                        @if (fieldType == FieldTypeDto.Number)
                        {
                            @* TODO: create input number component which can handle string values *@
                            @*<OjedaInputNumber @bind-Value="field.Value" class="form-control" id="@hash" disabled="@_isSubmitting"
                                             placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />*@

                            <OjedaInputText @bind-Value="field.Data" class="form-control" id="@hash" disabled="@_isSubmitting"
                                             placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                        }
                        
                        <ValidationMessage For="@(() => field.Data)"></ValidationMessage>
                    </div>
                }
            </FormSection>
        }

        <div class="my-4">
            <OjedaFormFooter
                IsSubmitting="@_isSubmitting"
                OnCancel="@OnCancel"
                OnReset="@OnReset"/>
        </div>
        
    </EditForm>
    
    </div>
}

@code {

    private CreateAssetDto _createAsset = new();
    
    private AssetDto _asset;
    private EditContext _editContext;

    private ServerSideFluentValidation _serverValidation;

    private bool _isLoading;
    private bool _isSubmitting;
    private string _error;
    
    protected override async Task OnInitializedAsync()
    {
        NavManager.TryGetQueryString<string>("assetTypeId", out var assetTypeId);

        await GetAssetType(assetTypeId);
    }

    private async Task OnSubmitForm()
    {
        if (_isSubmitting)
        {
            return;
        }
        
        _isSubmitting = true;
        _serverValidation.ClearErrors();

        var result = await Ojeda.AssetsService.CreateAsync(_createAsset);
        
        if(result.StatusCode == HttpStatusCode.BadRequest && result.Error.ValidationErrors.Any())
        {
            _serverValidation.DisplayErrors(result.Error.ValidationErrors);
        }
        else if (!result.Success)
        {
            ToastService.ShowError($"Could not submit asset. {result.Error?.Message} ({result.Error?.Code}).");
        }
        else
        {
            var asset = result.Data;
            NavManager.NavigateTo($"/assets/{asset.Id}");
        }
        
        _isSubmitting = false;
    }

    private void OnCancel()
    {
        if (_isSubmitting)
        {
            return;
        }
        
        NavManager.NavigateTo("/assets");
    }
    
    private void OnReset()
    {
        if (_isSubmitting)
        {
            return;
        }

        Init();
    }

    private string GetFieldSetName(string id)
    {
        return GetFieldSet(id).Name;
    }

    private string GetFieldSetDescription(string id)
    {
        return GetFieldSet(id).Description;
    }

    private string GetFieldName(string fieldSetId, string fieldId)
    {
        return GetField(fieldSetId, fieldId).Name;
    }

    private string GetFieldDescription(string fieldSetId, string fieldId)
    {
        return GetField(fieldSetId, fieldId).Description;
    }

    private FieldTypeDto GetFieldType(string fieldSetId, string fieldId)
    {
        return GetField(fieldSetId, fieldId).Properties.Type;
    }

    private AssetFieldSetDto GetFieldSet(string id)
    {
        var fieldSet = _asset.FieldSets.FirstOrDefault(_ => _.Id.Equals(id));

        if (fieldSet == null)
        {
            throw new Exception($"Invalid state: field set {id} not available.");
        }

        return fieldSet;
    }

    private AssetFieldDto GetField(string fieldSetId, string fieldId)
    {
        var fieldSet = GetFieldSet(fieldSetId);
        var field = fieldSet.Fields.FirstOrDefault(_ => _.Id.Equals(fieldId));

        if (field == null)
        {
            throw new Exception($"Invalid state: field {fieldId} not available.");
        }

        return field;
    }

    private async Task GetAssetType(string assetTypeId)
    {
        if (string.IsNullOrEmpty(assetTypeId))
        {
            _error = "Cannot load asset: asset type id is missing.";
            return;
        }

        _isLoading = true;
        
        var result = await Ojeda.AssetsService.GetByAssetType(assetTypeId);

        if (result.Success)
        {
            _error = null;
            _asset = result.Data;

            Init();
        }
        else if (result.StatusCode == HttpStatusCode.NotFound)
        {
            _error = "Cannot load asset: asset type does not exist.";
        }
        else
        {
            ToastService.ShowError($"Could not load asset type. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo("/assets");
        }

        _isLoading = false;
    }

    private void Init()
    {
        _createAsset = new CreateAssetDto
        {
            AssetTypeId = _asset.AssetType.Id,
            FieldSets = _asset.FieldSets.Select(fs => new CreateAssetFieldSetDto
            {
                Id = fs.Id,
                Fields = fs.Fields.Select(f => new CreateAssetFieldDto
                {
                    Id = f.Id,
                    Data = f.Data
                }).ToList()
            }).ToList()
        };

        _editContext = new EditContext(_createAsset);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

}
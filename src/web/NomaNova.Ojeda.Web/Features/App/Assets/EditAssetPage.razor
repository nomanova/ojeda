@inherits UpsertAssetPage

<OjedaLoader IsLoading="_isLoading">

    <div class="ojeda-form">
    
    <EditForm EditContext="_editContext" OnValidSubmit="OnSubmitForm">

        <AssetFluentValidationValidator Asset="@Asset"/>
        <ServerSideFluentValidation @ref="_serverValidation"/>

        @foreach (var fieldSet in _updateAsset.FieldSets)
        {
            <FormSection Title="@(GetFieldSetName(fieldSet.Id))" HelpText="@(GetFieldSetDescription(fieldSet.Id))">
                @foreach (var field in fieldSet.Fields)
                {
                    var hash = $"{fieldSet.Id}-{field.Id}".ToShortHash();
                    
                    <div class="mb-3">
                        <label for="@hash" class="form-label">@(GetFieldLabel(fieldSet.Id, field.Id))</label>
                        
                        @{
                            var fieldDataType = GetFieldDataType(fieldSet.Id, field.Id);
                        }
                        
                        @if (fieldDataType == FieldDataTypeDto.String)
                        {
                            var fieldData = (StringFieldDataDto)field.Data;
                            
                            <OjedaInputText @bind-Value="fieldData.Value" class="form-control" id="@hash" disabled="@_isSubmitting"
                                            placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                            
                            <ValidationMessage For="@(() => fieldData.Value)"></ValidationMessage>
                        }
                        
                        @if (fieldDataType == FieldDataTypeDto.Long)
                        {
                            var fieldData = (LongFieldDataDto)field.Data;
                            
                            <OjedaInputNumber @bind-Value="fieldData.Value"
                                              ParsingErrorMessage="Value must be integer."
                                              class="form-control" id="@hash" disabled="@_isSubmitting"
                                              placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                            
                            <ValidationMessage For="@(() => fieldData.Value)"></ValidationMessage>
                        }
                        
                        @if (fieldDataType == FieldDataTypeDto.Double)
                        {
                            var fieldData = (DoubleFieldDataDto)field.Data;
                            
                            <OjedaInputNumber @bind-Value="fieldData.Value" class="form-control" id="@hash" disabled="@_isSubmitting"
                                              placeholder="@(GetFieldDescription(fieldSet.Id, field.Id))" />
                            
                            <ValidationMessage For="@(() => fieldData.Value)"></ValidationMessage>
                        }
                    </div>
                }
            </FormSection>
        }

        <div class="my-4">
            
                <!-- Submit -->
                <OjedaButton
                    Style="@ButtonStyle.Primary"
                    Type="@ButtonType.Submit"
                    IsDisabled="@IsUpdateDisabled()"
                    IsLoading="_isSubmitting"
                    Text="Update"/>
            
        </div>

    </EditForm>
    
    </div>

</OjedaLoader>

@code {

    private UpdateAssetDto _updateAsset = new();

    private EditContext _editContext;

    private ServerSideFluentValidation _serverValidation;

    private bool _isLoading;
    private bool _isSubmitting;
    private bool _isModified;

    [Parameter]
    public string AssetId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.AssetsService.GetByIdAsync(AssetId);

        if (result.Success)
        {
            Asset = result.Data;
            Init();
        }
        else
        {
            ToastService.ShowError($"Could not load asset. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo("/assets");
        }

        _isLoading = false;
    }

    private async Task OnSubmitForm()
    {
        if (_isSubmitting)
        {
            return;
        }
        
        _isSubmitting = true;
        _serverValidation.ClearErrors();

        var result = await Ojeda.AssetsService.UpdateAsync(AssetId, _updateAsset);

        if(result.StatusCode == HttpStatusCode.BadRequest && result.Error.ValidationErrors.Any())
        {
            _serverValidation.DisplayErrors(result.Error.ValidationErrors);
        }
        else if (!result.Success)
        {
            ToastService.ShowError($"Could not submit asset. {result.Error?.Message} ({result.Error?.Code}).");
        }
        else
        {
            InitEditContext();
        }

        _isSubmitting = false;
    }

    private void Init()
    {
        _updateAsset = new UpdateAssetDto
        {
            AssetTypeId = Asset.AssetType.Id,
            FieldSets = Asset.FieldSets.Select(fs => new UpdateAssetFieldSetDto
            {
                Id = fs.Id,
                Fields = fs.Fields.Select(f => new UpdateAssetFieldDto
                {
                    Id = f.Id,
                    Data = f.Data.Copy()
                }).ToList()
            }).ToList()
        };

        InitEditContext();
    }

    private void InitEditContext()
    {
        _editContext = new EditContext(_updateAsset);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());

        _isModified = false;
        _editContext.OnFieldChanged += OnFieldChanged;
    }

    private void OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _isModified = _editContext.IsModified();
    }

    private bool IsUpdateDisabled()
    {
        return !_isModified || _isSubmitting;
    }

}
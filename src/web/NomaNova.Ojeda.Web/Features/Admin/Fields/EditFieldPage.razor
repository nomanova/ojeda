@page "/admin/fields/edit/{FieldId}"
@layout AdminLayout
@inherits FieldPage

<OjedaBreadcrumb Data="@_breadcrumbItems"/>

<h3>Edit Field</h3>

<OjedaLoader IsLoading="_isLoading">

    <EditForm EditContext="EditContext" OnValidSubmit="OnSubmitForm">

        <FluentValidationValidator DisableAssemblyScanning="@true"/>
        <ServerSideFluentValidation @ref="ServerValidation"/>

        <div class="ojeda-form mb-4">

            <!-- Name -->
            <OjedaFormField ForId="field-name" Label="Name" IsRequired="true" ValidateFor="@(() => _updateField.Name)">
                <InputText @bind-Value="_updateField.Name" class="form-control" id="field-name" disabled="@IsSubmitting"/>
            </OjedaFormField>

            <!-- Description -->
            <OjedaFormField ForId="field-description" Label="Description" ValidateFor="@(() => _updateField.Description)"
                            HelpText="Optional, will be used as hint for the field input control.">
                <InputText @bind-Value="_updateField.Description" class="form-control" id="field-description" disabled="@IsSubmitting"/>
            </OjedaFormField>

            <!-- Type -->
            <OjedaFormField ForId="field-type" Label="Type" IsRequired="true">
                <InputSelect @bind-Value="_updateField.Data.Type" @oninput="OnTypeChange" class="form-control" id="field-type" disabled="@IsSubmitting">
                    @foreach (var type in Enum.GetValues(typeof(FieldTypeDto)))
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </OjedaFormField>

        <!-- Type: Text -->
        @if (_updateField.Data.Type == FieldTypeDto.Text)
        {
            var textData = (TextFieldDataDto) _updateField.Data;

            <OjedaFormField ForId="field-text-minLength" Label="Minimum Length" ValidateFor="@(() => textData.MinLength)"
                            HelpText="Optional, will validate the minimum input length.">
                <InputNumber @bind-Value="textData.MinLength" DisplayName="Minimum Length" class="form-control" id="field-text-minLength" disabled="@IsSubmitting"/>
            </OjedaFormField>

            <OjedaFormField ForId="field-text-maxLength" Label="Maximum Length" ValidateFor="@(() => textData.MaxLength)"
                            HelpText="Optional, will validate the maximum input length.">
                <InputNumber @bind-Value="textData.MaxLength" DisplayName="Maximum Length" class="form-control" id="field-text-maxLength" disabled="@IsSubmitting"/>
            </OjedaFormField>
        }

        <!-- Type: Number -->
        @if (_updateField.Data.Type == FieldTypeDto.Number)
        {
            var numberData = (NumberFieldDataDto) _updateField.Data;
            
            <OjedaFormField ForId="field-text-withDecimals" Label="Allow Decimals" ValidateFor="@(() => numberData.WithDecimals)"
                            HelpText="Determines if decimal numbers are allowed.">
                <InputCheckbox @bind-Value="numberData.WithDecimals" DisplayName="Allow Decimals" id="field-text-withDecimals" disabled="@IsSubmitting"/>
            </OjedaFormField>
            
            <OjedaFormField ForId="field-text-minValue" Label="Minimum Value" ValidateFor="@(() => numberData.MinValue)"
                            HelpText="Optional, will validate the minimum input value.">
                <InputNumber @bind-Value="numberData.MinValue" DisplayName="Minimum Value" class="form-control" id="field-text-minValue" disabled="@IsSubmitting"/>
            </OjedaFormField>
            
            <OjedaFormField ForId="field-text-maxValue" Label="Maximum Value" ValidateFor="@(() => numberData.MaxValue)"
                            HelpText="Optional, will validate the maximum input value.">
                <InputNumber @bind-Value="numberData.MaxValue" DisplayName="Maximum Value" class="form-control" id="field-text-maxValue" disabled="@IsSubmitting"/>
            </OjedaFormField>
        }
            
        </div>

        <OjedaFormFooter
            IsSubmitting="@IsSubmitting"
            OnCancel="@OnCancel"
            OnReset="@OnReset"/>

    </EditForm>

</OjedaLoader>

@code {

    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new() {Text = "Admin", Url = "/admin"},
        new() {Text = "Fields", Url = "/admin/fields"},
        new() {Text = "Edit"}
    };

    protected override string ReturnPath => "/admin/fields";

    private bool _isLoading;

    private readonly UpdateFieldDto _updateField = new();

    private FieldDto _field;

    [Parameter]
    public string FieldId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.FieldsService.GetByIdAsync(FieldId);

        if (result.Success)
        {
            _field = result.Data;
            Init();
        }
        else
        {
            ToastService.ShowError($"Could not load field. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo(ReturnPath);
        }

        _isLoading = false;
    }

    protected override async Task<OjedaDataResult<FieldDto>> OnSubmitEntity()
    {
        return await Ojeda.FieldsService.UpdateAsync(_field.Id, _updateField);
    }

    protected override void Init()
    {
        _updateField.Name = _field.Name;
        _updateField.Description = _field.Description;
        _updateField.Data = _field.Data;

        EditContext = new EditContext(_updateField);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }
    
    protected override void SetFieldData(FieldDataDto fieldData)
    {
        _updateField.Data = fieldData;
    }
}
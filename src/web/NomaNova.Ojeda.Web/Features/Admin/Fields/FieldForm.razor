@using System.Reflection
@using NomaNova.Ojeda.Client.Results
@using System.Net

@inject NavigationManager NavManager
@inject IToastService ToastService

<EditForm EditContext="_editContext" OnValidSubmit="OnSubmitForm">
    
    <FluentValidationValidator />
    <ServerSideFluentValidation @ref="_serverValidation" />
    
    <!-- Name -->
    <div class="mb-3 w-50">
        <label for="fieldName" class="form-label">Name*</label>
        <InputText @bind-Value="_field.Name" class="form-control" id="fieldName" disabled="@_isLoading"></InputText>
        <ValidationMessage For="@(() => _field.Name)"></ValidationMessage>
    </div>
    
    <!-- Description -->
    <div class="mb-3 w-50">
        <label for="fieldDescription" class="form-label">Description</label>
        <InputText @bind-Value="_field.Description" class="form-control" id="fieldDescription" disabled="@_isLoading"></InputText>
        <div id="fieldDescriptionHelp" class="form-text">Optional, will be used as hint for the field input control.</div>
        <ValidationMessage For="@(() => _field.Description)"></ValidationMessage>
    </div>
    
    <!-- Type -->
    <div class="mb-3 w-50">
        <label for="fieldType" class="form-label">Type*</label>
        <InputSelect @bind-Value="_field.Type" class="form-control" id="fieldType" disabled="@_isLoading">
            @foreach (var type in Enum.GetValues(typeof(FieldTypeDto)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _field.Type)"></ValidationMessage>
    </div>

    <!-- Footer -->
    <div class="my-5">
        <button class="btn btn-primary" type="submit" disabled="@_isLoading">
            @if (_isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>   
            }
            Submit
        </button>
        <button class="btn btn-secondary" type="button" @onclick="OnReset" disabled="@_isLoading">Reset</button>
        <button class="btn" type="button" @onclick="OnCancel" disabled="@_isLoading">Cancel</button>
    </div>
    
</EditForm>

@code {

    private FieldDto _field;
    private EditContext _editContext;
    
    private ServerSideFluentValidation _serverValidation;
    
    private bool _isLoading;

    [Parameter]
    public FieldDto Field { get; set; }

    [Parameter] 
    public Func<FieldDto, Task<OjedaDataResult<FieldDto>>> OnSubmit { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Init();
        
        if (Field != null)
        {
            _field.Id = Field.Id;
            _field.Name = Field.Name;
            _field.Description = Field.Description;
            _field.Type = Field.Type;
        }
    }

    protected override void OnInitialized()
    {
        Init();
    }
    
    private void OnReset()
    {
        if (_isLoading)
        {
            return;
        }

        Init();
    }
    
    private void OnCancel()
    {
        if (_isLoading)
        {
            return;
        }
        
        NavManager.NavigateTo("/admin/fields");
    }

    private async Task OnSubmitForm()
    {
        if (_isLoading)
        {
            return;
        }
        
        _isLoading = true;
        _serverValidation.ClearErrors();
        Init(_field);

        var result = await OnSubmit(_field);

        if(result.StatusCode == HttpStatusCode.BadRequest && result.Error.ValidationErrors.Any())
        {
            _serverValidation.DisplayErrors(result.Error.ValidationErrors);
        }
        else if (!result.Success)
        {
            ToastService.ShowError($"Could not submit field. {result.Error?.Message} ({result.Error?.Code}).");
        }
        else
        {
            NavManager.NavigateTo("/admin/fields");
        }

        _isLoading = false;
    }
    
    private void Init(FieldDto field = null)
    {
        _field = field ?? new FieldDto();
        
        _editContext = new EditContext(_field);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }
}
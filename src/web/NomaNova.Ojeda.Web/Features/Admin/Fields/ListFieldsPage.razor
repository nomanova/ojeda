@page "/admin/fields"
@layout AdminLayout

@using Blazored.LocalStorage

@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager
@inject IToastService ToastService
@inject OjedaClient Ojeda

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/admin">Admin</a></li>
        <li class="breadcrumb-item active" aria-current="page">Fields</li>
    </ol>
</nav>

<h3>Fields</h3>

<div class="d-flex justify-content-between my-3">

    <div class="d-flex">
          <DebounceInput id="inp-search" class="form-control" style="width: 350px;" type="search" placeholder="Search..." autocomplete="off"
            DebounceTime="SearchDebounceMs"
            MinLength="SearchMinInputChars"
            OnValueChanged="OnSearchAsync" />
              
          <button class="btn btn-primary ms-2" @onclick="OnAdd">Add Field</button>  
    </div>
    
    @if (_isLoading)
    {
        <div class="spinner-border text-primary" style="width: 38px; height: 38px;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>

@if (_fields == null)
{
    <p>Loading fields...</p>   
}
else if (!_fields.Any())
{
    if (string.IsNullOrEmpty(_searchQuery))
    {
        <p>No fields available.</p>
    }
    else
    {
        <p>No search results.</p>
    }
}
else
{
    <table class="table table-striped w-100">
        <thead>
        <tr>
            <th class="py-2">Name</th>
            <th class="py-2">Description</th>
            <th class="py-2">Type</th>
            <th class="py-2">Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var field in _fields)
        {
            <tr>
                <td class="pb-2 pr-3">@field.Name</td>
                <td class="pb-2 pr-3">@field.Description</td>
                <td class="pb-2 pr-3">@field.Type</td>
                <td class="pb-2 pr-3">
                    <a class="btn-link" role="button" @onclick="@(() => OnEdit(field.Id))">Edit</a> |
                    <a class="btn-link" role="button" @onclick="@(() => OnDelete(field.Id))">Delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    <div class="my-4">
        <Pager
            PageCount="@_pageCount"
            CurrentPage="@_currentPage"
            PageSize="@_pageSize"
            OnPageChanged="@OnPageChanged"
            OnPageSizeChanged="@OnPageSizeChanged" />
    </div>
}

@code {
        
    private const string KeyPageSize = "key-pager-page-size";
    
    private bool _isLoading;
    
    private const int SearchMinInputChars = 1;
    private const int SearchDebounceMs = 400;

    private string _searchQuery = "";
    private ICollection<FieldDto> _fields;

    private int _pageCount;
    private int _currentPage;
    private int _pageSize;
    
    protected override async Task OnInitializedAsync()
    {
        // Fetch page size from local storage
        var storedPageSize = await LocalStorageService.GetItemAsync<int>(KeyPageSize);
        var pageSize = storedPageSize == 0 ? 10 : storedPageSize;

        await GetFieldsAsync(null, 1, pageSize);
    }

    private async Task OnSearchAsync(string query)
    {
        _searchQuery = query;
        await GetFieldsAsync(query, 1, _pageSize);
    }

    private void OnAdd()
    {
        NavManager.NavigateTo("/admin/fields/add");
    }

    private void OnEdit(string id)
    {
        NavManager.NavigateTo($"/admin/fields/edit/{id}");
    }

    private async Task OnDelete(string id)
    {
        _isLoading = true;
        StateHasChanged();
        
        var result = await Ojeda.FieldsService.DeleteAsync(id);

        if (result.Success)
        {
            var toRemove = _fields.FirstOrDefault(f => f.Id.Equals(id));
            if (toRemove != null)
            {
                _fields.Remove(toRemove);
            }
        }
        else
        {
            ToastService.ShowError($"Could not delete field. {result.Error?.Message} ({result.Error?.Code}).");
        }

        if (!_fields.Any() && _currentPage > 1)
        {
            await GetFieldsAsync(_searchQuery, _currentPage - 1, _pageSize);
        }
        else
        {
            _isLoading = false;
            StateHasChanged();   
        }
    }

    private async Task OnPageChanged(int pageNumber)
    {
        await GetFieldsAsync(_searchQuery, pageNumber, _pageSize);
    }

    private async Task OnPageSizeChanged(int pageSize)
    {
        // Store page size to local storage
        await LocalStorageService.SetItemAsync(KeyPageSize, pageSize);

        await GetFieldsAsync(_searchQuery, 1, pageSize);
    }

    private async Task GetFieldsAsync(string query = null, int pageNumber = 1, int pageSize = 25)
    {
        _isLoading = true;
        StateHasChanged();
        
        var result = await Ojeda.FieldsService.GetAsync(query, null, true, pageNumber, pageSize);
        
        if (result.Success)
        {
            var paginatedData = result.Data;
        
            _fields = paginatedData.Items;
            _pageCount = paginatedData.TotalPages;
            _currentPage = paginatedData.PageNumber;
            _pageSize = pageSize;
        }
        else
        {
            _fields = new List<FieldDto>();
            ToastService.ShowError($"Could not load fields. {result.Error?.Message} ({result.Error?.Code}).");
        }
        
        _isLoading = false;
        StateHasChanged();
    }
}
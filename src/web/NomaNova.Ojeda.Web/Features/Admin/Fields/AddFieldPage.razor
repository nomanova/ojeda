@page "/admin/fields/add"
@layout AdminLayout
@inherits FieldPage

<ExpandablePage
    HeaderCssClass="mx-3 pt-3 ojeda-form"
    ContentCssClass="px-3"
    FooterCssClass="mx-3 ojeda-form">

    <Header>

        <OjedaBreadcrumb Data="@_breadcrumbItems"/>
        <PageHeader Title="Add Field"/>

    </Header>

    <Content>

        <EditForm id="form-add-field" EditContext="EditContext" OnValidSubmit="OnSubmitForm">

            <FluentValidationValidator DisableAssemblyScanning="@true"/>
            <ServerSideFluentValidation @ref="ServerValidation"/>

            <div class="ojeda-form">

                <FormSection Title="General" CssClass="mb-3">

                    <!-- Name -->
                    <OjedaFormField ForId="field-name" Label="Name" IsRequired="true" ValidateFor="@(() => _createField.Name)">
                        <OjedaInputText @bind-Value="_createField.Name" class="form-control" id="field-name" disabled="@IsSubmitting"/>
                    </OjedaFormField>

                    <!-- Description -->
                    <OjedaFormField ForId="field-description" Label="Description" ValidateFor="@(() => _createField.Description)"
                                    HelpText="Will be used as the hint for the input control, e.g. provide an example field value.">
                        <OjedaInputText @bind-Value="_createField.Description" class="form-control" id="field-description" disabled="@IsSubmitting"/>
                    </OjedaFormField>

                </FormSection>

                <FormSection Title="Properties">

                    <!-- Type -->
                    <OjedaFormField ForId="field-type" Label="Type" IsRequired="true">
                        <InputSelect @bind-Value="_createField.Properties.Type" @oninput="OnTypeChange" class="form-control" id="field-type" disabled="@IsSubmitting">
                            @foreach (var type in Enum.GetValues(typeof(FieldTypeDto)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                    </OjedaFormField>

                    <!-- Type: Text -->
                    @if (_createField.Properties.Type == FieldTypeDto.Text)
                    {
                        var textData = (TextFieldPropertiesDto)_createField.Properties;

                        <OjedaFormField ForId="field-text-minLength" Label="Minimum Length" ValidateFor="@(() => textData.MinLength)"
                                        HelpText="Restrict input to a minimum length.">
                            <OjedaInputNumber
                                @bind-Value="textData.MinLength"
                                DisplayName="Minimum Length"
                                ParsingErrorMessage="The {0} field must be integer."
                                class="form-control"
                                id="field-text-minLength"
                                disabled="@IsSubmitting"/>
                        </OjedaFormField>

                        <OjedaFormField ForId="field-text-maxLength" Label="Maximum Length" ValidateFor="@(() => textData.MaxLength)"
                                        HelpText="Restrict input to a maximum length.">
                            <OjedaInputNumber
                                @bind-Value="textData.MaxLength"
                                DisplayName="Maximum Length"
                                ParsingErrorMessage="The {0} field must be integer."
                                class="form-control"
                                id="field-text-maxLength"
                                disabled="@IsSubmitting"/>
                        </OjedaFormField>
                    }

                    <!-- Type: Number -->
                    @if (_createField.Properties.Type == FieldTypeDto.Number)
                    {
                        var numberData = (NumberFieldPropertiesDto)_createField.Properties;

                        <div class="form-check form-switch mb-3">
                            <InputCheckbox @bind-Value="numberData.WithDecimals" class="form-check-input" disabled="@IsSubmitting" id="field-text-withDecimals"/>
                            <label class="form-check-label" for="field-text-withDecimals">Allow decimal</label>
                            <div class="form-text">When checked, non-integer numbers are allowed.</div>
                            <ValidationMessage For="@(() => numberData.WithDecimals)"></ValidationMessage>
                        </div>

                        <OjedaFormField ForId="field-text-minValue" Label="Minimum Value" ValidateFor="@(() => numberData.MinValue)"
                                        HelpText="Restrict input to a minimum value.">
                            <OjedaInputNumber @bind-Value="numberData.MinValue" DisplayName="Minimum Value" class="form-control" id="field-text-minValue" disabled="@IsSubmitting"/>
                        </OjedaFormField>

                        <OjedaFormField ForId="field-text-maxValue" Label="Maximum Value" ValidateFor="@(() => numberData.MaxValue)"
                                        HelpText="Restrict input to a maximum value.">
                            <OjedaInputNumber @bind-Value="numberData.MaxValue" DisplayName="Maximum Value" class="form-control" id="field-text-maxValue" disabled="@IsSubmitting"/>
                        </OjedaFormField>
                    }

                </FormSection>

            </div>

        </EditForm>
        
    </Content>

    <Footer>

        <OjedaFormFooter
            CssClass="my-3"
            Alignment="@FormFooterAlignment.End"
            Form="form-add-field"
            IsSubmitting="@IsSubmitting"
            OnCancel="@OnCancel"
            OnReset="@OnReset"/>

    </Footer>

</ExpandablePage>

@code {

    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new() { Text = "Admin", Url = "/admin" },
        new() { Text = "Fields", Url = "/admin/fields" },
        new() { Text = "Add" }
    };

    protected override string ReturnPath => "/admin/fields";

    private CreateFieldDto _createField;

    protected override void OnInitialized()
    {
        Init();
    }

    protected override async Task<OjedaDataResult<FieldDto>> OnSubmitEntity()
    {
        return await Ojeda.FieldsService.CreateAsync(_createField);
    }

    protected override void Init()
    {
        _createField = new CreateFieldDto
        {
            Properties = new TextFieldPropertiesDto()
        };

        EditContext = new EditContext(_createField);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    protected override void SetFieldProperties(FieldPropertiesDto fieldProperties)
    {
        _createField.Properties = fieldProperties;
    }

}
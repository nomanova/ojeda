@inject OjedaClient Ojeda

<div class="d-flex flex-column justify-content-between">

    <div class="mb-3">
        <Search OnValueChanged="@OnSearchAsync" />
    </div>

<div class="mb-3" style="height: 350px; overflow-y: auto;">

@if (_fields == null)
{
    <p>Type at least one character to start searching.</p>
}
else if (_error != null)
{
    <p class="text-danger">@_error</p>
}
else if (!_fields.Any())
{
    if (string.IsNullOrEmpty(_searchQuery))
    {
        <p>No items available.</p>
    }
    else
    {
        <p>No search results.</p>
    }
}
else
{
    <table class="table table-hover w-100">
    <thead>
    <tr>
        <th class="py-2">Name</th>
        <th class="py-2">Description</th>
        <th class="py-2">Type</th>
    </tr>
    </thead>
    <tbody>
        @foreach (var field in _fields)
            {
                <tr @onclick="() => OnFieldSelected(field)" style="cursor: pointer;">
                    <td class="pb-2 pr-3">@field.Name.Truncate(Constants.DefaultTruncateSmall)</td>
                    <td class="pb-2 pr-3">@field.Description.Truncate(Constants.DefaultTruncateSmall)</td>
                    <td class="pb-2 pr-3">@field.Type</td>
                </tr>
            }
    </tbody>
    </table>
}

</div>

    <div class="d-flex justify-content-between align-items-center">

        <div class="d-flex align-items-center">
            <div class="me-2">
            <SlimPager
                PageCount="@_pageCount"
                CurrentPage="@_currentPage"
                OnPageChanged="@OnPageChanged"/>
            </div>
            
            <Spinner IsLoading="@_isLoading" />
        </div>

            <button class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
        </div>
</div>

@code {
    
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }
    
    [Parameter] 
    public IList<string> ExcludedIds { get; set; }
    
    private bool _isLoading;

    private string _error;
    
    private string _searchQuery = "";
    private ICollection<FieldDto> _fields;
    
    private int _pageCount;
    private int _currentPage;
    
    private async Task OnSearchAsync(string query)
    {
        if (string.IsNullOrEmpty(query))
        {
            _fields = null;
            _pageCount = 0;
            _currentPage = 0;
            
            return;
        }

        _searchQuery = query;
        await GetFieldsAsync(query, 1, Constants.DefaultPageSize);
    }

    private async Task OnPageChanged(int pageNumber)
    {
        await GetFieldsAsync(_searchQuery, pageNumber, Constants.DefaultPageSize);
    }
    
    private void OnCancel()
    {
        ModalInstance.CancelAsync();
    }

    private void OnFieldSelected(FieldDto field)
    {
        ModalInstance.CloseAsync(ModalResult.Ok(field));
    }

    private async Task GetFieldsAsync(string query, int pageNumber, int pageSize)
    {
        _isLoading = true;
        StateHasChanged();
        
        var result = await Ojeda.FieldsService.GetAsync(
            query, null, true, ExcludedIds, pageNumber, pageSize);
        
        if (result.Success)
        {
            _error = null;
            
            var paginatedData = result.Data;
            
            _fields = paginatedData.Items;
            _pageCount = paginatedData.TotalPages;
            _currentPage = paginatedData.PageNumber;
        }
        else
        {
            _fields = new List<FieldDto>();
            _error = $"Could not load fields. {result.Error?.Message} ({result.Error?.Code}).";
        }

        _isLoading = false;
        StateHasChanged();
    }
}
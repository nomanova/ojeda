@page "/admin/field-sets/edit/{FieldSetId}"
@layout AdminLayout
@inherits FieldSetPage<UpdateFieldSetDto, UpdateFieldSetFieldDto>

<OjedaBreadcrumb Data="@_breadcrumbItems"/>

<h3 class="mb-3">Edit Field Set</h3>

<OjedaLoader IsLoading="_isLoading">

    <EditForm EditContext="EditContext" OnValidSubmit="OnSubmitForm">

        <FluentValidationValidator DisableAssemblyScanning="@true"/>
        <ServerSideFluentValidation @ref="ServerValidation"/>

        <div class="ojeda-form mb-4">

            <FormSection Title="General">
            
            <!-- Name -->
            <OjedaFormField ForId="fieldset-name" Label="Name" IsRequired="true" ValidateFor="@(() => UpsertFieldSet.Name)">
                <OjedaInputText @bind-Value="UpsertFieldSet.Name" class="form-control" id="fieldset-name" disabled="@IsSubmitting"/>
            </OjedaFormField>

            <!-- Description -->
            <OjedaFormField ForId="fieldset-description" Label="Description" ValidateFor="@(() => UpsertFieldSet.Description)">
                <OjedaInputText @bind-Value="UpsertFieldSet.Description" class="form-control" id="fieldset-description" disabled="@IsSubmitting"/>
            </OjedaFormField>

            </FormSection>
            
            <FormSection Title="Fields">
            
            <!-- Fields -->
            <div class="mb-3">
                <div class="d-flex justify-content-between">
                    <label class="form-label">Fields*</label>
                    <a class="btn-link @(IsSubmitting ? "disabled" : "")" role="button" @onclick="@OnAddField">Add Field</a>
                </div>

                <div>
                    @if (UpsertFieldSet.Fields?.Count > 0)
                    {
                        <table class="table">
                            <thead>
                            <tr>
                                <th class="py-2" colspan="2">Order</th>
                                <th class="py-2">Name</th>
                                <th class="py-2">Is Required</th>
                                <th class="py-2">Delete</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var fieldSetField in UpsertFieldSet.Fields)
                            {
                                <tr>
                                    <!-- Order -->
                                    <td class="pb-2 pr-0">
                                        <ItemOrderHandler Type="@OrderType.Up"
                                                          IsEnabled="@(fieldSetField.Order != 1 && UpsertFieldSet.Fields.Count > 1)"
                                                          OnClick="@(() => OnMoveItemUp(fieldSetField))"/>
                                    </td>
                                    <td class="pb-2 pr-0">
                                        <ItemOrderHandler Type="@OrderType.Down"
                                                          IsEnabled="@(fieldSetField.Order != UpsertFieldSet.Fields.Count && UpsertFieldSet.Fields.Count > 1)"
                                                          OnClick="@(() => OnMoveItemDown(fieldSetField))"/>
                                    </td>
                                    <!-- Name -->
                                    <td class="pb-2 pr-3">@(GetFieldName(fieldSetField.Id))</td>
                                    <!-- Is Required -->
                                    <td class="pb-2 pr-3">
                                        <InputCheckbox @bind-Value="fieldSetField.IsRequired" id="@($"{fieldSetField.Id}-is-required")" disabled="@IsSubmitting"/>
                                    </td>
                                    <!-- Delete -->
                                    <td class="pb-2 pr-3">
                                        <ItemDeleteHandler OnClick="@(() => OnRemoveItem(fieldSetField))"/>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted fst-italic">Use the link on the right to start adding fields.</p>
                    }
                    <ValidationMessage For="@(() => UpsertFieldSet.Fields)"></ValidationMessage>
                </div>
            </div>

            </FormSection>
            
        </div>
        
            <OjedaFormFooter
                IsSubmitting="@IsSubmitting"
                OnCancel="@OnCancel"
                OnReset="@OnReset"/>

    </EditForm>

</OjedaLoader>

@code {

    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new() {Text = "Admin", Url = "/admin"},
        new() {Text = "Field Sets", Url = "/admin/field-sets"},
        new() {Text = "Edit"}
    };

    private bool _isLoading;

    private FieldSetDto _fieldSet;

    protected override UpdateFieldSetDto UpsertFieldSet { get; set; }

    [Parameter]
    public string FieldSetId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.FieldSetsService.GetByIdAsync(FieldSetId);

        if (result.Success)
        {
            _fieldSet = result.Data;
            Init();
        }
        else
        {
            ToastService.ShowError($"Could not load field set. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo(ReturnPath);
        }

        _isLoading = false;
    }

    protected override async Task<OjedaDataResult<FieldSetDto>> OnSubmitEntity()
    {
        return await Ojeda.FieldSetsService.UpdateAsync(_fieldSet.Id, UpsertFieldSet);
    }

    protected override void Init()
    {
        UpsertFieldSet = new UpdateFieldSetDto
        {
            Name = _fieldSet.Name,
            Description = _fieldSet.Description,
            Fields = _fieldSet.Fields.Select(_ => new UpdateFieldSetFieldDto
            {
                Id = _.Field.Id,
                Order = _.Order,
                IsRequired = _.IsRequired
            }).ToList()
        };

        Fields = new List<FieldDto>();
        foreach (var fieldSetField in _fieldSet.Fields)
        {
            Fields.Add(fieldSetField.Field);
        }

        EditContext = new EditContext(UpsertFieldSet);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

}
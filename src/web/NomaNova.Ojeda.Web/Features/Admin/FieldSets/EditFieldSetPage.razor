@page "/admin/field-sets/edit/{FieldSetId}"
@layout AdminLayout

@inject NavigationManager NavManager
@inject IToastService ToastService
@inject OjedaClient Ojeda

@{
    var paths = new Dictionary<string, string>()
    {
        {"Admin", "/admin"},
        {"Field Sets", "/admin/field-sets"},
        {"Edit", null}
    };
}
<Breadcrumb Paths="@paths" />

<div class="d-flex justify-content-between w-50">
    <h3>Edit Field Set</h3>
</div>

@if (_isLoading)
{
    <p>Loading...</p>   
}
else
{
    <FieldSetForm FieldSet="@_fieldSet" OnSubmit="@OnEdit"></FieldSetForm>    
}

@code {
    
    private bool _isLoading;
    private readonly FieldSetDto _fieldSet = new();
    
    [Parameter]
    public string FieldSetId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.FieldSetsService.GetByIdAsync(FieldSetId);

        if (result.Success)
        {
            var fieldSetDto = result.Data;
            
            _fieldSet.Id = fieldSetDto.Id;
            _fieldSet.Name = fieldSetDto.Name;
            _fieldSet.Description = fieldSetDto.Description;
            
            _fieldSet.Fields.Clear();
            _fieldSet.Fields.AddRange(fieldSetDto.Fields.Select(_ => new FieldSetFieldDto
            {
                Order = _.Order,
                Field = new FieldDto
                {
                    Id = _.Field.Id,
                    Name = _.Field.Name,
                    Description = _.Field.Description,
                    Type = _.Field.Type
                }
            }));
        }
        else
        {
            ToastService.ShowError($"Could not load field set. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo("/admin/field-sets");
        }

        _isLoading = false;
    }

    private async Task<OjedaDataResult<FieldSetDto>> OnEdit(FieldSetDto fieldSet)
    {
        return await Ojeda.FieldSetsService.UpdateAsync(fieldSet.Id, fieldSet);
    }
}
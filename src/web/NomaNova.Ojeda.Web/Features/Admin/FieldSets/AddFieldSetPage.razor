@page "/admin/field-sets/add"
@layout AdminLayout
@inherits FieldSetPage<CreateFieldSetDto, CreateFieldSetFieldDto>

<ExpandablePage
    HeaderCssClass="mx-3 pt-3 ojeda-form"
    ContentCssClass="px-3"
    FooterCssClass="mx-3 ojeda-form">

    <Header>

        <OjedaBreadcrumb Data="@_breadcrumbItems"/>
        <PageHeader Title="Add Field Set"/>

    </Header>

    <Content>

        <EditForm id="form-add-field-set" EditContext="EditContext" OnValidSubmit="OnSubmitForm">

            <FluentValidationValidator DisableAssemblyScanning="@true"/>
            <ServerSideFluentValidation @ref="ServerValidation"/>

            <div class="ojeda-form">

                <FormSection Title="General" CssClass="mb-3">

                    <!-- Name -->
                    <OjedaFormField ForId="fieldset-name" Label="Name" IsRequired="true" ValidateFor="@(() => UpsertFieldSet.Name)">
                        <OjedaInputText @bind-Value="UpsertFieldSet.Name" class="form-control" id="fieldset-name" disabled="@IsSubmitting"/>
                    </OjedaFormField>

                    <!-- Description -->
                    <OjedaFormField ForId="fieldset-description" Label="Description" ValidateFor="@(() => UpsertFieldSet.Description)">
                        <OjedaInputText @bind-Value="UpsertFieldSet.Description" class="form-control" id="fieldset-description" disabled="@IsSubmitting"/>
                    </OjedaFormField>

                </FormSection>

                <FormSection Title="Fields">

                    <!-- Fields -->
                    <div class="mb-3">
                        <div class="d-flex mb-2">
                            <a class="btn-link @(IsSubmitting ? "disabled" : "")" role="button" @onclick="@OnAddField">Add Field</a>
                        </div>

                        <div>
                            @if (UpsertFieldSet.Fields?.Count > 0)
                            {
                                <table class="table">
                                    <thead>
                                    <tr>
                                        <th class="py-2" colspan="2">Order</th>
                                        <th class="py-2">Name</th>
                                        <th class="py-2">Is Required</th>
                                        <th class="py-2">Delete</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var fieldSetField in UpsertFieldSet.Fields)
                                    {
                                        <tr>
                                            <!-- Order -->
                                            <td class="pb-2 pr-0">
                                                <ItemOrderHandler Type="@OrderType.Up"
                                                                  IsEnabled="@(fieldSetField.Order != 1 && UpsertFieldSet.Fields.Count > 1)"
                                                                  OnClick="@(() => OnMoveItemUp(fieldSetField))"/>
                                            </td>
                                            <td class="pb-2 pr-0">
                                                <ItemOrderHandler Type="@OrderType.Down"
                                                                  IsEnabled="@(fieldSetField.Order != UpsertFieldSet.Fields.Count && UpsertFieldSet.Fields.Count > 1)"
                                                                  OnClick="@(() => OnMoveItemDown(fieldSetField))"/>
                                            </td>
                                            <!-- Name -->
                                            <td class="pb-2 pr-3">@(GetFieldName(fieldSetField.Id))</td>
                                            <!-- Is Required -->
                                            <td class="pb-2 pr-3">
                                                <InputCheckbox @bind-Value="fieldSetField.IsRequired" id="@($"{fieldSetField.Id}-is-required")" disabled="@IsSubmitting"/>
                                            </td>
                                            <!-- Delete -->
                                            <td class="pb-2 pr-3">
                                                <ItemDeleteHandler OnClick="@(() => OnRemoveItem(fieldSetField))"/>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <p class="text-muted fst-italic">Use the link above to start adding fields.</p>
                            }
                            <ValidationMessage For="@(() => UpsertFieldSet.Fields)"></ValidationMessage>
                        </div>
                    </div>

                </FormSection>

            </div>

        </EditForm>

    </Content>

    <Footer>

        <OjedaFormFooter
            CssClass="my-3"
            Alignment="@FormFooterAlignment.End"
            Form="form-add-field-set"
            IsSubmitting="@IsSubmitting"
            OnCancel="@OnCancel"
            OnReset="@OnReset"/>

    </Footer>

</ExpandablePage>


@code {

    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new() { Text = "Admin", Url = "/admin" },
        new() { Text = "Field Sets", Url = "/admin/field-sets" },
        new() { Text = "Add" }
    };

    protected override CreateFieldSetDto UpsertFieldSet { get; set; }

    protected override void OnInitialized()
    {
        Init();
    }

    protected override async Task<OjedaDataResult<FieldSetDto>> OnSubmitEntity()
    {
        return await Ojeda.FieldSetsService.CreateAsync(UpsertFieldSet);
    }

    protected override void Init()
    {
        UpsertFieldSet = new CreateFieldSetDto
        {
            Fields = new List<CreateFieldSetFieldDto>()
        };
        Fields = new List<FieldDto>();

        EditContext = new EditContext(UpsertFieldSet);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

}
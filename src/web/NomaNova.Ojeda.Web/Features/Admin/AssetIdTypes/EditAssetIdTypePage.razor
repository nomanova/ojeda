@page "/admin/asset-id-types/edit/{AssetIdTypeId}"
@layout AdminLayout
@inherits AssetIdTypePage

<ExpandablePage
    HeaderCssClass="mx-3 pt-3 ojeda-form"
    ContentCssClass="px-3"
    FooterCssClass="mx-3 ojeda-form">

    <Header>

        <OjedaBreadcrumb Data="@_breadcrumbItems"/>
        <PageHeader Title="Edit Asset Id Type"/>

    </Header>

    <Content>

        <OjedaLoader IsLoading="_isLoading">

            <EditForm id="form-edit-id-type" EditContext="EditContext" OnValidSubmit="OnSubmitForm">

                <FluentValidationValidator DisableAssemblyScanning="@true"/>
                <ServerSideFluentValidation @ref="ServerValidation"/>

                <div class="ojeda-form">

                    <FormSection Title="General" CssClass="mb-3">

                        <!-- Name -->
                        <OjedaFormField ForId="id-type-name" Label="Name" IsRequired="true" ValidateFor="@(() => _updateAssetIdType.Name)">
                            <OjedaInputText @bind-Value="_updateAssetIdType.Name" class="form-control" id="id-type-name" disabled="@IsSubmitting"/>
                        </OjedaFormField>

                        <!-- Description -->
                        <OjedaFormField ForId="id-type-description" Label="Description" ValidateFor="@(() => _updateAssetIdType.Description)">
                            <OjedaInputText @bind-Value="_updateAssetIdType.Description" class="form-control" id="id-type-description" disabled="@IsSubmitting"/>
                        </OjedaFormField>

                    </FormSection>

                    <FormSection Title="Properties">

                        <!-- Symbology -->
                        <OjedaFormField
                            ForId="id-type-symbology"
                            Label="Symbology"
                            HelpText="The symbology defines the available character set and length of the id, and often its visualization as a label."
                            IsRequired="true">

                            <InputSelect @bind-Value="_updateAssetIdType.Properties.Symbology" @oninput="OnSymbologyChange" class="form-control" id="id-type-symbology" disabled="@IsSubmitting">
                                @foreach (var symbology in Enum.GetValues(typeof(SymbologyDto)))
                                {
                                    <option value="@symbology">@(symbology.ToString()?.ToUpperInvariant())</option>
                                }
                            </InputSelect>

                        </OjedaFormField>

                        <!-- Allow Manual Entry -->
                        <div class="form-check form-switch mb-3">
                            <InputCheckbox @bind-Value="_updateAssetIdType.WithManualEntry" class="form-check-input" disabled="@IsSubmitting" id="id-type-withManualEntry"/>
                            <label class="form-check-label" for="id-type-withManualEntry">Allow manual entry</label>
                            <div class="form-text">When deselected, asset id's of this type are always generated by the system.</div>
                            <ValidationMessage For="@(() => _updateAssetIdType.WithManualEntry)"></ValidationMessage>
                        </div>

                    </FormSection>

                </div>

            </EditForm>

        </OjedaLoader>

    </Content>

    <Footer>

        <OjedaFormFooter
            CssClass="my-3"
            Alignment="@FormFooterAlignment.End"
            Form="form-edit-id-type"
            IsSubmitting="@IsSubmitting"
            OnCancel="@OnCancel"
            OnReset="@OnReset"/>


    </Footer>

</ExpandablePage>

@code {

    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new() { Text = "Admin", Url = "/admin" },
        new() { Text = "Asset Id Types", Url = "/admin/asset-id-types" },
        new() { Text = "Edit" }
    };

    protected override string ReturnPath => "/admin/asset-id-types";

    private bool _isLoading;

    private readonly UpdateAssetIdTypeDto _updateAssetIdType = new();

    private AssetIdTypeDto _assetIdType;

    [Parameter]
    public string AssetIdTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.AssetIdTypesService.GetByIdAsync(AssetIdTypeId);

        if (result.Success)
        {
            _assetIdType = result.Data;
            Init();
        }
        else
        {
            ToastService.ShowError(result.Error.Stringify("Could not load asset id type."));
            NavManager.NavigateTo(ReturnPath);
        }

        _isLoading = false;
    }

    protected override async Task<OjedaDataResult<AssetIdTypeDto>> OnSubmitEntity()
    {
        return await Ojeda.AssetIdTypesService.UpdateAsync(_assetIdType.Id, _updateAssetIdType);
    }

    protected override void Init()
    {
        _updateAssetIdType.Name = _assetIdType.Name;
        _updateAssetIdType.Description = _assetIdType.Description;
        _updateAssetIdType.WithManualEntry = _assetIdType.WithManualEntry;
        _updateAssetIdType.Properties = _assetIdType.Properties;

        EditContext = new EditContext(_updateAssetIdType);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    protected override void SetSymbologyProperties(SymbologyPropertiesDto symbologyProperties)
    {
        _updateAssetIdType.Properties = symbologyProperties;
    }

}
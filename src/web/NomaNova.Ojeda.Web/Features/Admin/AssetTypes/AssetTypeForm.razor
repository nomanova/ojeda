@using System.Net
@using NomaNova.Ojeda.Models.Dtos.FieldSets

@inject NavigationManager NavManager
@inject IToastService ToastService

<EditForm EditContext="_editContext" OnValidSubmit="OnSubmitForm">

    <FluentValidationValidator />
    <ServerSideFluentValidation @ref="_serverValidation" />
    
    <!-- Name -->
    <div class="mb-3 w-50">
        <label for="assetTypeName" class="form-label">Name*</label>
        <InputText @bind-Value="_assetType.Name" class="form-control" id="assetTypeName" disabled="@_isLoading"></InputText>
        <ValidationMessage For="@(() => _assetType.Name)"></ValidationMessage>
    </div>
    
    <!-- Description -->
    <div class="mb-3 w-50">
        <label for="assetTypeDescription" class="form-label">Description</label>
        <InputText @bind-Value="_assetType.Description" class="form-control" id="assetTypeDescription" disabled="@_isLoading"></InputText>
        <ValidationMessage For="@(() => _assetType.Description)"></ValidationMessage>
    </div>

    <!-- Field Sets -->
    <div class="mb-3 w-50">
        <div class="d-flex justify-content-between">
            <label class="form-label">Field Sets*</label>
            <a class="btn-link @(_isLoading ? "disabled" : "")" role="button" @onclick="@OnAddFieldSet">Add Field Set</a>
        </div>
        <div>
            @if (_assetType.FieldSets?.Count > 0)
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th class="py-2"><!-- Move up --></th>
                        <th class="py-2"><!-- Move down --></th>
                        <th class="py-2">Name</th>
                        <th class="py-2">Description</th>
                        <th class="py-2"><!-- Remove --></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var assetTypeFieldSet in _assetType.FieldSets.OrderBy(f => f.Order))
                    {
                        <tr>
                            <td class="pb-2 pr-0">
                                @if (assetTypeFieldSet.Order != 1 && _assetType.FieldSets.Count > 1)
                                {
                                    <a class="text-dark text-decoration-none" title="Move up" role="button" @onclick="@(() => OnMoveFieldSetUp(assetTypeFieldSet))">
                                        <i class="fs-6 bi-arrow-up-circle"></i>
                                    </a>
                                }
                            </td>
                            <td class="pb-2 pr-0">
                                @if (assetTypeFieldSet.Order != _assetType.FieldSets.Count && _assetType.FieldSets.Count > 1)
                                {
                                    <a class="text-dark text-decoration-none" title="Move down" role="button" @onclick="@(() => OnMoveFieldSetDown(assetTypeFieldSet))">
                                        <i class="fs-6 bi-arrow-down-circle"></i>
                                    </a>
                                }
                            </td>
                            <td class="pb-2 pr-3">@assetTypeFieldSet.FieldSet.Name.Truncate()</td>
                            <td class="pb-2 pr-3">
                                @if (string.IsNullOrEmpty(assetTypeFieldSet.FieldSet.Description))
                                {
                                    <span class="text-muted fst-italic">No description</span>
                                }
                                else
                                {
                                    @assetTypeFieldSet.FieldSet.Description.Truncate()    
                                }
                            </td>
                            <td class="pb-2 pr-3">
                                <a class="text-dark text-decoration-none" title="Remove" role="button" @onclick="@(() => OnRemoveField(assetTypeFieldSet))">
                                    <i class="fs-6 bi-x-circle"></i>
                                </a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted fst-italic">Use the link on the right to start adding field sets.</p>
            }
            <ValidationMessage For="@(() => _assetType.FieldSets)"></ValidationMessage>
        </div>
    </div>

    <!-- Footer -->
    <div class="my-5">
        <button class="btn btn-primary" type="submit" disabled="@_isLoading">
            @if (_isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>   
            }
            Submit
        </button>
        <button class="btn btn-secondary" type="button" @onclick="OnReset" disabled="@_isLoading">Reset</button>
        <button class="btn" type="button" @onclick="OnCancel" disabled="@_isLoading">Cancel</button>
    </div>

</EditForm>

@code {
    
    private AssetTypeDto _assetType;
    private EditContext _editContext;
    
    private ServerSideFluentValidation _serverValidation;
    
    private bool _isLoading;
    
    [CascadingParameter] 
    public IModalService Modal { get; set; }

    [Parameter]
    public AssetTypeDto AssetType { get; set; }
    
    [Parameter] 
    public Func<AssetTypeDto, Task<OjedaDataResult<AssetTypeDto>>> OnSubmit { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        Init();

        if (AssetType != null)
        {
            _assetType.Id = AssetType.Id;
            _assetType.Name = AssetType.Name;
            _assetType.Description = AssetType.Description;
            
            _assetType.FieldSets.Clear();
            _assetType.FieldSets.AddRange(AssetType.FieldSets.Select(_ => new AssetTypeFieldSetDto
            {
                Order = _.Order,
                FieldSet = new FieldSetSummaryDto
                {
                    Id = _.FieldSet.Id,
                    Name = _.FieldSet.Name,
                    Description = _.FieldSet.Description,
                }
            }));
        }
    }

    protected override void OnInitialized()
    {
        Init();
    }
    
    private async Task OnAddFieldSet()
    {
        if (_isLoading)
        {
            return;
        }
        
        var parameters = new ModalParameters();
        
        var excludedIds = _assetType.FieldSets.Select(_ => _.FieldSet.Id).ToList();
        parameters.Add("ExcludedIds", excludedIds);
        
        var selectFieldModal = Modal.Show<SelectFieldSetModal>("Add Field Set", parameters, Constants.DefaultModalOptions);
        var result = await selectFieldModal.Result;

        if (!result.Cancelled)
        {
            _assetType.FieldSets.Add(new AssetTypeFieldSetDto
            {
                Order = _assetType.FieldSets.Count == 0 ? 1 : _assetType.FieldSets.Max(f => f.Order) + 1,
                FieldSet = (FieldSetSummaryDto) result.Data
            });
            
            StateHasChanged();
        }
    }
    
    private void OnReset()
    {
        if (_isLoading)
        {
            return;
        }

        Init();
    }
    
    private void OnCancel()
    {
        if (_isLoading)
        {
            return;
        }
        
        NavManager.NavigateTo("/admin/asset-types");
    }
    
    private void OnMoveFieldSetUp(AssetTypeFieldSetDto assetTypeFieldSetDto)
    {
        if (_isLoading)
        {
            return;
        }
        
        var index = _assetType.FieldSets.IndexOf(assetTypeFieldSetDto);
        
        _assetType.FieldSets.RemoveAt(index);
        _assetType.FieldSets.Insert(index - 1, assetTypeFieldSetDto);
        
        UpdateOrder();
    }
    
    private void OnMoveFieldSetDown(AssetTypeFieldSetDto assetTypeFieldSetDto)
    {
        if (_isLoading)
        {
            return;
        }
        
        var index = _assetType.FieldSets.IndexOf(assetTypeFieldSetDto);
        
        _assetType.FieldSets.RemoveAt(index);
        _assetType.FieldSets.Insert(index + 1, assetTypeFieldSetDto);
        
        UpdateOrder();
    }
    
    private void OnRemoveField(AssetTypeFieldSetDto assetTypeFieldSetDto)
    {
        if (_isLoading)
        {
            return;
        }
        
        _assetType.FieldSets.Remove(assetTypeFieldSetDto);
        UpdateOrder();
    }
    
    private async Task OnSubmitForm()
    {
        if (_isLoading)
        {
            return;
        }
        
        _isLoading = true;
        _serverValidation.ClearErrors();
        Init(_assetType);
        
        var result = await OnSubmit(_assetType);
        
        if(result.StatusCode == HttpStatusCode.BadRequest && result.Error.ValidationErrors.Any())
        {
            _serverValidation.DisplayErrors(result.Error.ValidationErrors);
        }
        else if (!result.Success)
        {
            ToastService.ShowError($"Could not submit asset type. {result.Error?.Message} ({result.Error?.Code}).");
        }
        else
        {
            NavManager.NavigateTo("/admin/asset-types");
        }
        
        _isLoading = false;
    }
    
    private void Init(AssetTypeDto assetType = null)
    {
        _assetType = assetType ?? new AssetTypeDto();
        
        _editContext = new EditContext(_assetType);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }
    
    private void UpdateOrder()
    {
        var order = 1;
        foreach (var assetTypeFieldSet in _assetType.FieldSets)
        {
            assetTypeFieldSet.Order = order;
            order++;
        }
    }
}
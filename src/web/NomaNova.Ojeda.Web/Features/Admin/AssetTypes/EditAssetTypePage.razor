@page "/admin/asset-types/edit/{AssetTypeId}"
@layout AdminLayout
@inherits AssetTypePage<UpdateAssetTypeDto, UpdateAssetTypeFieldSetDto>

<ExpandablePage
    HeaderCssClass="mx-3 pt-3 ojeda-form"
    ContentCssClass="px-3"
    FooterCssClass="mx-3 ojeda-form">

    <Header>

        <OjedaBreadcrumb Data="@_breadcrumbItems"/>
        <PageHeader Title="Edit Asset Type"/>

    </Header>

    <Content>

        <OjedaLoader IsLoading="_isLoading">

            <EditForm id="form-edit-asset-type" EditContext="EditContext" OnValidSubmit="OnSubmitForm">

                <FluentValidationValidator Validator="@(new UpdateAssetTypeDtoFieldValidator())"/>
                <ServerSideFluentValidation @ref="ServerValidation"/>

                <div class="ojeda-form">

                    <FormSection Title="General" CssClass="mb-3">

                        <!-- Name -->
                        <OjedaFormField ForId="assettype-name" Label="Name" IsRequired="true" ValidateFor="@(() => UpsertAssetType.Name)">
                            <OjedaInputText @bind-Value="UpsertAssetType.Name" class="form-control" id="assettype-name" disabled="@IsSubmitting"/>
                        </OjedaFormField>

                        <!-- Description -->
                        <OjedaFormField ForId="assettype-description" Label="Description" ValidateFor="@(() => UpsertAssetType.Description)">
                            <OjedaInputText @bind-Value="UpsertAssetType.Description" class="form-control" id="assettype-description" disabled="@IsSubmitting"/>
                        </OjedaFormField>

                    </FormSection>

                    <FormSection Title="Field Sets">

                        <!-- Field Sets -->
                        <div class="mb-3">
                            <div class="d-flex mb-2">
                                <a class="btn-link @(IsSubmitting ? "disabled" : "")" role="button" @onclick="@OnAddFieldSet">Add Field Set</a>
                            </div>
                            <div>
                                @if (UpsertAssetType.FieldSets?.Count > 0)
                                {
                                    <table class="table">
                                        <thead>
                                        <tr>
                                            <th class="py-2" colspan="2"></th>
                                            <th class="py-2">Name</th>
                                            <th class="py-2">Delete</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach (var assetTypeFieldSet in UpsertAssetType.FieldSets.OrderBy(f => f.Order))
                                        {
                                            <tr>
                                                <td class="pb-2 pr-0">
                                                    <ItemOrderHandler Type="@OrderType.Up"
                                                                      IsEnabled="@(assetTypeFieldSet.Order != 1 && UpsertAssetType.FieldSets.Count > 1)"
                                                                      OnClick="@(() => OnMoveItemUp(assetTypeFieldSet))"/>
                                                </td>
                                                <td class="pb-2 pr-0">
                                                    <ItemOrderHandler Type="@OrderType.Down"
                                                                      IsEnabled="@(assetTypeFieldSet.Order != UpsertAssetType.FieldSets.Count && UpsertAssetType.FieldSets.Count > 1)"
                                                                      OnClick="@(() => OnMoveItemDown(assetTypeFieldSet))"/>
                                                </td>
                                                <td class="pb-2 pr-3">@(GetFieldSetName(assetTypeFieldSet.Id))</td>
                                                <td class="pb-2 pr-3">
                                                    <ItemDeleteHandler OnClick="@(() => OnRemoveItem(assetTypeFieldSet))"/>
                                                </td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <p class="text-muted fst-italic">Use the link above to start adding field sets.</p>
                                }
                                <ValidationMessage For="@(() => UpsertAssetType.FieldSets)"></ValidationMessage>
                            </div>
                        </div>

                    </FormSection>

                </div>

            </EditForm>

        </OjedaLoader>

    </Content>

    <Footer>

        <OjedaFormFooter
            CssClass="my-3"
            Alignment="@FormFooterAlignment.End"
            Form="form-edit-asset-type"
            IsSubmitting="@IsSubmitting"
            OnCancel="@OnCancel"
            OnReset="@OnReset"/>

    </Footer>

</ExpandablePage>

@code {

    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new() { Text = "Admin", Url = "/admin" },
        new() { Text = "Asset Types", Url = "/admin/asset-types" },
        new() { Text = "Edit" }
    };

    private bool _isLoading;

    private AssetTypeDto _assetType;

    protected override UpdateAssetTypeDto UpsertAssetType { get; set; }

    [Parameter]
    public string AssetTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.AssetTypesService.GetByIdAsync(AssetTypeId);

        if (result.Success)
        {
            _assetType = result.Data;
            Init();
        }
        else
        {
            ToastService.ShowError($"Could not load asset type. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo(ReturnPath);
        }

        _isLoading = false;
    }

    protected override async Task<OjedaDataResult<AssetTypeDto>> OnSubmitEntity()
    {
        var dryRunResult = await Ojeda.AssetTypesService.DryRunUpdateAsync(_assetType.Id, UpsertAssetType);

        if (!dryRunResult.Success)
        {
            return OjedaDataResult<AssetTypeDto>.ForFailure(dryRunResult.StatusCode, dryRunResult.Error);
        }

        var dryRunData = dryRunResult.Data;

        if (dryRunData.Assets.HasElements())
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(UpdateAssetTypeModal.Item), dryRunData);
            
            var updateAssetTypeModal = 
                Modal.Show<UpdateAssetTypeModal>("Field Set Removal", parameters, Constants.DefaultModalOptions);

            var result = await updateAssetTypeModal.Result;

            if (result.Cancelled)
            {
                return null;
            }
        }

        return await Ojeda.AssetTypesService.UpdateAsync(_assetType.Id, UpsertAssetType);
    }

    protected override void Init()
    {
        UpsertAssetType = new UpdateAssetTypeDto
        {
            Name = _assetType.Name,
            Description = _assetType.Description,
            FieldSets = _assetType.FieldSets.Select(_ => new UpdateAssetTypeFieldSetDto
            {
                Id = _.FieldSet.Id,
                Order = _.Order
            }).ToList()
        };

        FieldSets = new List<FieldSetSummaryDto>();
        foreach (var assetTypeFieldSet in _assetType.FieldSets)
        {
            FieldSets.Add(assetTypeFieldSet.FieldSet);
        }

        EditContext = new EditContext(UpsertAssetType);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

}
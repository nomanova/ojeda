@page "/admin/asset-types/edit/{AssetTypeId}"
@layout AdminLayout
@inherits AssetTypePage<UpdateAssetTypeDto, UpdateAssetTypeFieldSetDto>

<OjedaBreadcrumb Data="@_breadcrumbItems" />

<h3>Edit Asset Type</h3>

<OjedaLoader IsLoading="_isLoading">

<EditForm EditContext="EditContext" OnValidSubmit="OnSubmitForm">

    <FluentValidationValidator Validator="@(new UpdateAssetTypeDtoFieldValidator())" />
    <ServerSideFluentValidation @ref="ServerValidation" />
    
    <div class="w-50 mb-4">
    
        <!-- Name -->
        <OjedaFormField ForId="assettype-name" Label="Name" IsRequired="true" ValidateFor="@(() => UpsertAssetType.Name)">
            <InputText @bind-Value="UpsertAssetType.Name" class="form-control" id="assettype-name" disabled="@IsSubmitting"/>
        </OjedaFormField>

        <!-- Description -->
        <OjedaFormField ForId="assettype-description" Label="Description" ValidateFor="@(() => UpsertAssetType.Description)">
            <InputText @bind-Value="UpsertAssetType.Description" class="form-control" id="assettype-description" disabled="@IsSubmitting"/>
        </OjedaFormField>

        <!-- Field Sets -->
        <div class="mb-3">
            <div class="d-flex justify-content-between">
                <label class="form-label">Field Sets*</label>
                <a class="btn-link @(IsSubmitting ? "disabled" : "")" role="button" @onclick="@OnAddFieldSet">Add Field Set</a>
            </div>
            <div>
                @if (UpsertAssetType.FieldSets?.Count > 0)
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th class="py-2"><!-- Move up --></th>
                            <th class="py-2"><!-- Move down --></th>
                            <th class="py-2">Name</th>
                            <th class="py-2">Description</th>
                            <th class="py-2"><!-- Remove --></th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var assetTypeFieldSet in UpsertAssetType.FieldSets.OrderBy(f => f.Order))
                        {
                            <tr>
                                <td class="pb-2 pr-0">
                                    @if (assetTypeFieldSet.Order != 1 && UpsertAssetType.FieldSets.Count > 1)
                                    {
                                        <a class="text-dark text-decoration-none" title="Move up" role="button" @onclick="@(() => OnMoveItemUp(assetTypeFieldSet))">
                                            <i class="fs-6 bi-arrow-up-circle"></i>
                                        </a>
                                    }
                                </td>
                                <td class="pb-2 pr-0">
                                    @if (assetTypeFieldSet.Order != UpsertAssetType.FieldSets.Count && UpsertAssetType.FieldSets.Count > 1)
                                    {
                                        <a class="text-dark text-decoration-none" title="Move down" role="button" @onclick="@(() => OnMoveItemDown(assetTypeFieldSet))">
                                            <i class="fs-6 bi-arrow-down-circle"></i>
                                        </a>
                                    }
                                </td>
                                <td class="pb-2 pr-3">@(GetFieldSetName(assetTypeFieldSet.Id))</td>
                                <td class="pb-2 pr-3">
                                    @if (string.IsNullOrEmpty(GetFieldSetDescription(assetTypeFieldSet.Id)))
                                    {
                                        <span class="text-muted fst-italic">No description</span>
                                    }
                                    else
                                    {
                                        @GetFieldSetDescription(assetTypeFieldSet.Id) 
                                    }
                                </td>
                                <td class="pb-2 pr-3">
                                    <a class="text-dark text-decoration-none" title="Remove" role="button" @onclick="@(() => OnRemoveItem(assetTypeFieldSet))">
                                        <i class="fs-6 bi-x-circle"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-muted fst-italic">Use the link on the right to start adding field sets.</p>
                }
                <ValidationMessage For="@(() => UpsertAssetType.FieldSets)"></ValidationMessage>
            </div>
        </div>
    
    </div>

    <OjedaFormFooter
        IsSubmitting="@IsSubmitting"
        OnCancel="@OnCancel"
        OnReset="@OnReset"/>

</EditForm>

</OjedaLoader>

@code {
    
    private readonly ICollection<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new () {Text = "Admin", Url = "/admin"},
        new () {Text = "Asset Types", Url = "/admin/asset-types"},
        new () {Text = "Edit"}
    };
    
    private bool _isLoading;

    private AssetTypeDto _assetType;
    
    protected override UpdateAssetTypeDto UpsertAssetType { get; set; }
    
    [Parameter]
    public string AssetTypeId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var result = await Ojeda.AssetTypesService.GetByIdAsync(AssetTypeId);

        if (result.Success)
        {
            _assetType = result.Data;
            Init();
        }
        else
        {
            ToastService.ShowError($"Could not load asset type. {result.Error?.Message} ({result.Error?.Code}).");
            NavManager.NavigateTo(ReturnPath);
        }

        _isLoading = false;
    }
    
    protected override async Task<OjedaDataResult<AssetTypeDto>> OnSubmitEntity()
    {
        return await Ojeda.AssetTypesService.UpdateAsync(_assetType.Id, UpsertAssetType);
    }
    
    protected override void Init()
    {
        UpsertAssetType = new UpdateAssetTypeDto
        {
            Name = _assetType.Name,
            Description = _assetType.Description,
            FieldSets = _assetType.FieldSets.Select(_ => new UpdateAssetTypeFieldSetDto
            {
                Id = _.FieldSet.Id,
                Order = _.Order
            }).ToList()
        };

        FieldSets = new List<FieldSetSummaryDto>();
        foreach (var assetTypeFieldSet in _assetType.FieldSets)
        {
            FieldSets.Add(assetTypeFieldSet.FieldSet);
        }

        EditContext = new EditContext(UpsertAssetType);
        EditContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }
}
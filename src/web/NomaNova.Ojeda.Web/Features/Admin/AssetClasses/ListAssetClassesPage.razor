@page "/admin/asset-classes"
@layout AdminLayout
@inherits ListItemsPage<AssetClassDto>

@inject OjedaClient Ojeda

@{
    var paths = new Dictionary<string, string>
    {
        {"Admin", "/admin"},
        {"Asset Classes", null}
    };
}
<Breadcrumb Paths="@paths" />

<h3>Asset Classes</h3>

<div class="d-flex justify-content-between my-3">

    <div class="d-flex">
        <div style="width: 350px;">
            <Search OnValueChanged="@OnSearchAsync"></Search>
        </div>
        <button class="btn btn-primary ms-2" @onclick="OnAdd">Add Asset Class</button>
    </div>
    
    <Spinner IsLoading="@IsLoading" />
</div>

@if (Items == null)
{
    <p class="text-muted fst-italic">Loading...</p>   
}
else if (!Items.Any())
{
    if (string.IsNullOrEmpty(SearchQuery))
    {
        <p class="text-muted fst-italic">No items available.</p>
    }
    else
    {
        <p class="text-muted fst-italic">No search results.</p>
    }
}
else
{
    <ActionsTableTemplate TItem="AssetClassDto" 
                          Items="@Items" 
                          EditItemCallBack="@OnEdit"
                          DeleteItemCallBack="@OnDelete">
        <TableHeader>
            <th>Name</th>
            <th>Description</th>
            <th># Field Sets</th>
        </TableHeader>
        <RowTemplate Context="assetClass">
            <td>@assetClass.Name</td>
            <td><Description Value="@assetClass.Description"/></td>
            <td>@assetClass.FieldSets.Count</td>
        </RowTemplate>
    </ActionsTableTemplate>

    <div class="my-4">
        <Pager
            PageCount="@PageCount"
            CurrentPage="@CurrentPage"
            PageSize="@PageSize"
            TotalCount="@TotalCount"
            OnPageChanged="@OnPageChanged"
            OnPageSizeChanged="@OnPageSizeChanged" />
    </div>
}

@code {
    
    protected override string Path => "/admin/asset-classes";

    protected override async Task<OjedaResult> DeleteItemAsync(AssetClassDto item)
    {
        return await Ojeda.AssetClassesService.DeleteAsync(item.Id);
    }

    protected override async Task<OjedaDataResult<PaginatedListDto<AssetClassDto>>> FetchItemsAsync(string query = null,
        int pageNumber = Constants.DefaultPageNumber,
        int pageSize = Constants.DefaultPageSize)
    {
        return await Ojeda.AssetClassesService.GetAsync(query, null, true, pageNumber, pageSize);
    }
}
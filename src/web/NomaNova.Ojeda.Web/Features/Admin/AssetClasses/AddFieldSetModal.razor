@inject OjedaClient Ojeda

<div class="d-flex flex-column justify-content-between">

        <div class="mb-3">
            <Search OnValueChanged="@OnSearchAsync" />
        </div>

    <div class="mb-3" style="height: 350px; overflow-y: auto;">
    
        @if (_fieldSets == null)
        {
            <p>Type at least one character to start searching.</p>
        }
        else if (_error != null)
        {
            <p class="text-danger">@_error</p>
        }
        else if (!_fieldSets.Any())
        {
            if (string.IsNullOrEmpty(_searchQuery))
            {
                <p>No items available.</p>
            }
            else
            {
                <p>No search results.</p>
            }
        }
        else
        {
            <table class="table table-hover w-100">
                <thead>
                <tr>
                    <th class="py-2">Name</th>
                    <th class="py-2">Description</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var fieldSet in _fieldSets)
                {
                    <tr @onclick="() => OnFieldSetSelected(fieldSet)" style="cursor: pointer;">
                        <td class="pb-2 pr-3">@fieldSet.Name.Truncate(Constants.DefaultTruncateSmall)</td>
                        <td class="pb-2 pr-3">@fieldSet.Description.Truncate(Constants.DefaultTruncateSmall)</td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
    
        <div class="d-flex justify-content-between align-items-center">
    
            <div class="d-flex align-items-center">
                <div class="me-2">
                <SlimPager
                    PageCount="@_pageCount"
                    CurrentPage="@_currentPage"
                    OnPageChanged="@OnPageChanged"/>
                </div>
                
                <Spinner IsLoading="@_isLoading" />
            </div>
    
                <button class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
            </div>
    
</div>


@code {
    
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }
    
    [Parameter] 
    public IList<string> ExcludedIds { get; set; }
        
    private bool _isLoading;

    private string _error;
    
    private string _searchQuery = "";
    private ICollection<FieldSetDto> _fieldSets;
    
    private int _pageCount;
    private int _currentPage;
    
    private async Task OnSearchAsync(string query)
    {
        if (string.IsNullOrEmpty(query))
        {
            _fieldSets = null;
            _pageCount = 0;
            _currentPage = 0;
            
            return;
        }

        _searchQuery = query;
        await GetFieldSetsAsync(query, 1, Constants.DefaultPageSize);
    }
    
    private async Task OnPageChanged(int pageNumber)
    {
        await GetFieldSetsAsync(_searchQuery, pageNumber, Constants.DefaultPageSize);
    }
    
    private void OnCancel()
    {
        ModalInstance.CancelAsync();
    }
    
    private void OnFieldSetSelected(FieldSetDto fieldSet)
    {
        ModalInstance.CloseAsync(ModalResult.Ok(fieldSet));
    }
    
    private async Task GetFieldSetsAsync(string query, int pageNumber, int pageSize)
    {
        _isLoading = true;
        StateHasChanged();
        
        var result = await Ojeda.FieldSetsService.GetAsync(
            query, null, true, ExcludedIds, pageNumber, pageSize);
        
        if (result.Success)
        {
            _error = null;
            
            var paginatedData = result.Data;
            
            _fieldSets = paginatedData.Items;
            _pageCount = paginatedData.TotalPages;
            _currentPage = paginatedData.PageNumber;
        }
        else
        {
            _fieldSets = new List<FieldSetDto>();
            _error = $"Could not load field sets. {result.Error?.Message} ({result.Error?.Code}).";
        }

        _isLoading = false;
        StateHasChanged();
    }
}